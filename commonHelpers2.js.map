{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["// COUNTDOWN TIMER\nconsole.log('Countdown timer');\n\n// ========== imports\n// ========== import \"flatpickr\" library\n// ========== from documentation\nimport flatpickr from 'flatpickr';\n// ========== additional\nimport \"flatpickr/dist/flatpickr.min.css\";\n\n// ========== import \"izitoast\" library\n// ========== from documentation\nimport iziToast from \"izitoast\";\n// ========== additional\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// ========== object of parameters\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        onSelectingValidDate(selectedDates[0]);\n        console.log(selectedDates[0]);\n    },\n};\n\n// ========== function for count of values\nfunction convertMs(ms) {\n// Number of milliseconds per unit of time\nconst second = 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\n\n// Remaining days\nconst days = Math.floor(ms / day);\n// Remaining hours\nconst hours = Math.floor((ms % day) / hour);\n// Remaining minutes\nconst minutes = Math.floor(((ms % day) % hour) / minute);\n// Remaining seconds\nconst seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\nreturn { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\nconsole.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\nconsole.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\n// ========== find elements\nconst inputWindow = document.querySelector('#datetime-picker');\n\nconst btnStart = document.querySelector('[data-start]');\n\nconst daysE = document.querySelector('[data-days]');\nconst hoursE = document.querySelector('[data-hours]');\nconst minutesE = document.querySelector('[data-minutes]');\nconst secondsE = document.querySelector('[data-seconds]');\n\n// ========== variables\n// ========== variable for interval id\nlet intervalId = null;\n// ========== variable for time and date of input\nlet inputDate = null;\n\n// ========== default state for \"Start\" button\nbtnStart.disabled = true;\n\n// ========== from documentation\n// ========== if using flatpickr in a framework,\n// ========== its recommended to pass the element directly\nflatpickr(inputWindow, options);\n\n// ========== handler of selecting date and check of valid date\nfunction onSelectingValidDate (selectedDates) {\n    inputDate = selectedDates.getTime();\n    if (inputDate < Date.now()) {\n        // blocking button startBtn\n        btnStart.disabled = true;\n        // show notification\n        iziToast.show({\n            backgroundColor: '#FD4A3F',\n            message: 'Please choose a date in the future',\n            timeout: 3000,\n            position: 'topRight',\n            transitionIn: 'flipInX',\n            transitionOut: 'flipOutX',\n        });\n        return;\n    }\n    // unblocking button startBtn\n    btnStart.disabled = false;\n};\n\nconst addLeadingZero = (value) => {\n  return String(value).padStart(2, '0');\n};\n\n// ========== show screen of timer\nconst updateClockface = ({ days, hours, minutes, seconds }) => {\n    secondsE.textContent = addLeadingZero(seconds);\n    minutesE.textContent = addLeadingZero(minutes);\n    hoursE.textContent = addLeadingZero(hours);\n    if (days > 99) {\n        daysE.textContent = days;\n    }\n    daysE.textContent = addLeadingZero(days);\n};\n\nconst countDownTimer = () => {\n    const deltaTime = inputDate - Date.now();\n    // counter values\n    const timeComponents = convertMs(deltaTime);\n    // show screen of timer\n    updateClockface(timeComponents);\n    if (secondsE.textContent === '00' && minutesE.textContent === '00'\n        && hoursE.textContent === '00' && daysE.textContent === '00') {\n        // show notification\n        iziToast.show({\n            backgroundColor: 'lightyellow',\n            message: 'Time is over!',\n            timeout: 3000,\n            position: 'topRight',\n            transitionIn: 'flipInX',\n            transitionOut: 'flipOutX',\n        });\n        clearInterval(intervalId);\n        // Unblocking button startBtn\n        btnStart.disabled = false;\n    }\n};\n\nconst handlerStart = () => {\n    intervalId = setInterval(countDownTimer, 1000);\n    btnStart.disabled = true;\n};\n\nconst notificationStart = () =>\n    // show notification\n    iziToast.show({\n        backgroundColor: 'lightgreen',\n        message: 'Time is started!',\n        timeout: 3000,\n        position: 'topRight',\n        transitionIn: 'flipInX',\n        transitionOut: 'flipOutX',\n    });\n\n// ========== listeners\nbtnStart.addEventListener('click', handlerStart);\n// ========== show notification\nbtnStart.addEventListener('click', notificationStart);"],"names":["options","selectedDates","onSelectingValidDate","convertMs","ms","days","hours","minutes","seconds","inputWindow","btnStart","daysE","hoursE","minutesE","secondsE","intervalId","inputDate","flatpickr","iziToast","addLeadingZero","value","updateClockface","countDownTimer","deltaTime","timeComponents","handlerStart","notificationStart"],"mappings":"+IACA,QAAQ,IAAI,iBAAiB,EAgB7B,MAAMA,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBC,EAAqBD,EAAc,EAAE,EACrC,QAAQ,IAAIA,EAAc,EAAE,CAC/B,CACL,EAGA,SAASE,EAAUC,EAAI,CAQvB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACtC,CAEA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAG/B,MAAMM,EAAc,SAAS,cAAc,kBAAkB,EAEvDC,EAAW,SAAS,cAAc,cAAc,EAEhDC,EAAQ,SAAS,cAAc,aAAa,EAC5CC,EAAS,SAAS,cAAc,cAAc,EAC9CC,EAAW,SAAS,cAAc,gBAAgB,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAIxD,IAAIC,EAAa,KAEbC,EAAY,KAGhBN,EAAS,SAAW,GAKpBO,EAAUR,EAAaT,CAAO,EAG9B,SAASE,EAAsBD,EAAe,CAE1C,GADAe,EAAYf,EAAc,UACtBe,EAAY,KAAK,MAAO,CAExBN,EAAS,SAAW,GAEpBQ,EAAS,KAAK,CACV,gBAAiB,UACjB,QAAS,qCACT,QAAS,IACT,SAAU,WACV,aAAc,UACd,cAAe,UAC3B,CAAS,EACD,MACH,CAEDR,EAAS,SAAW,EACxB,CAEA,MAAMS,EAAkBC,GACf,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAIhCC,EAAkB,CAAC,CAAE,KAAAhB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,IAAO,CAC3DM,EAAS,YAAcK,EAAeX,CAAO,EAC7CK,EAAS,YAAcM,EAAeZ,CAAO,EAC7CK,EAAO,YAAcO,EAAeb,CAAK,EACrCD,EAAO,KACPM,EAAM,YAAcN,GAExBM,EAAM,YAAcQ,EAAed,CAAI,CAC3C,EAEMiB,EAAiB,IAAM,CACzB,MAAMC,EAAYP,EAAY,KAAK,IAAG,EAEhCQ,EAAiBrB,EAAUoB,CAAS,EAE1CF,EAAgBG,CAAc,EAC1BV,EAAS,cAAgB,MAAQD,EAAS,cAAgB,MACvDD,EAAO,cAAgB,MAAQD,EAAM,cAAgB,OAExDO,EAAS,KAAK,CACV,gBAAiB,cACjB,QAAS,gBACT,QAAS,IACT,SAAU,WACV,aAAc,UACd,cAAe,UAC3B,CAAS,EACD,cAAcH,CAAU,EAExBL,EAAS,SAAW,GAE5B,EAEMe,EAAe,IAAM,CACvBV,EAAa,YAAYO,EAAgB,GAAI,EAC7CZ,EAAS,SAAW,EACxB,EAEMgB,EAAoB,IAEtBR,EAAS,KAAK,CACV,gBAAiB,aACjB,QAAS,mBACT,QAAS,IACT,SAAU,WACV,aAAc,UACd,cAAe,UACvB,CAAK,EAGLR,EAAS,iBAAiB,QAASe,CAAY,EAE/Cf,EAAS,iBAAiB,QAASgB,CAAiB"}